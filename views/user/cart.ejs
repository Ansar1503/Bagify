<%- include('../layout/user_header.ejs') %>

<div class="container mt-5 p-5" id="mainContainer">
  <div class="row">
    <!-- Main Cart Content -->
    <% if (!cart || cart.items.length === 0) { %>
    <div class="col-12 text-center">
      <h2>Your cart is empty!</h2>
      <p>Add items to it now.</p>
      <a href="/shop" class="btn btn-primary">Shop now</a>
    </div>
    <% } else { %>

    <div class="col-md-8" id="sendCartItem">
      <% cart.items.forEach(item => { %>
      <div class="card mb-3" id="productContainer">
        <div class="row no-gutters">
          <div class="col-md-4 d-flex align-items-center justify-content-center">
            <img src="imgs/products/<%= item.product?.product_images[0] %>" class="card-img" style="width: 150px; height: 150px; object-fit: cover; margin-bottom: 15px;" alt="Product Image">
          </div>
          <div class="col-md-8">
            <div class="card-body">
              <h5 class="card-title"><%= item.product?.name %></h5>
              <strong>Price:</strong> <span style="color: green;"> ₹<%= item.price %></span> <del style="color: red; <%= item.regularPrice === item.price ? 'display: none;' : '' %>">₹<%= item.regularPrice %></del>
              <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                  <div class="me-2">Qty:</div>
                  <button class="btn btn-sm btn-secondary decrease-quantity" data-product-item-id="<%= item._id %>" onclick="decreaseQuantity('<%= item._id %>')">-</button>
                  <span class="quantity-display mx-2"><%= item.quantity %></span>
                  <button class="btn btn-sm btn-secondary increase-quantity" data-product-item-id="<%= item._id %>" onclick="addQuantity('<%= item._id %>','<%= item.product.product_quantity %>')">+</button>
                </div>
                <span class="text-secondary" style="text-decoration: none; cursor: pointer; margin-bottom: 50px;" onclick="removeItem('<%= item._id %>')">Remove</span>
              </div>
            </div>
          </div>
        </div>
      </div>
      <% }) %>
    </div>

    <!-- Order Summary -->
    <div class="col-md-4" style="position: sticky; top: 0; height: 100vh;">
      <div class="card mb-3"> 
        <div class="card">
          <div class="card-body">
              <!-- Apply Coupon Button -->
              <div class="d-flex mt-3" id="applyandremovebtncontainer">
                <% if (summary.couponDiscount>0) { %>
                  <i class="bi bi-tag"></i><p id="coupontag">Coupon applied</p>
                  <button type="button" id="removeCouponButton" class="btn btn-danger btn-sm ms-2" onclick="removeCoupon('<%= cart.user._id %>')">Remove Coupon</button>
                <% }else {%>
                  <i class="bi bi-tag"></i><p id="coupontag">Apply coupon</p>
                  <button type="button" id="applyCouponButton" class="ms-2 btn btn-primary btn-sm" onclick="openCouponModal()">Apply Coupon</button>
              </div>
              <% } %>
            </div>
       </div>
        <div class="card-body">
          <h5 class="card-title">ORDER SUMMARY</h5>
          <p class="card-text d-flex justify-content-between">
            <span id="selectionItemsLength">Price (<%= cart.items.length %> items)</span>
            <span id="subTotalPrice">₹<%= summary.subtotal %></span>
          </p>
          <p class="card-text d-flex justify-content-between">
            <span>Delivery Charges</span>
            <span id="deliveryCharge" class="text-success"><%= summary.deliveryCharges || 'Free' %></span>
          </p>
          <p class="card-text d-flex justify-content-between">
            <span>Coupon Discount</span>
            <span id="couponDiscount" class="text-success">₹<%= summary.couponDiscount || '0.00'%></span>
          </p>
          <hr>
          <p class="card-text d-flex justify-content-between">
            <strong>Total Amount</strong>
            <strong><span id="totalPrice">₹<%= summary.total %></span></strong>
          </p>
        </div>
        
        <div class="row">
          <div class="col" id="checkout">
            <a href="/checkoutpage/<%= cart.user._id %>">
              <button type="submit" id="checkoutButton" class="btn custom-button btn-lg w-100" <%= parseFloat(summary.total) === 0 ? 'disabled' : '' %>>Proceed to Check Out</button>
            </a>
          </div>
        </div>
      </div>
    </div>
    <% } %>
  </div>
</div>



<div class="modal fade" id="couponModal" tabindex="-1" aria-labelledby="couponModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header border-0">
        <h5 class="modal-title" id="couponModalLabel">Available Coupons</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
       <% if(!coupons && coupons.length === 0 ) {%>
        <p>No coupons available</p>
        <% }else {%>
          <div class="row">
            <% coupons.forEach(coupon => { %>
              <%if(!coupons && coupons.length === 0 && coupon.usedBy.includes(cart.user._id)  ){%>
                <p>No coupons available</p>
                <% }else {%>
                <div class="col-md-6 mb-3">
                  <div class="card h-100 shadow-sm border-0">
                    <div class="card-body d-flex flex-column justify-content-between">
                      <div>
                        <h6 class="card-title text-dark">
                          <i class="bi bi-ticket-fill me-2"></i> 
                          <%= coupon.code %>
                        </h6>                    
                        <p class="card-text">
                          <strong>Discount:</strong> <%= coupon.discountPercentage %>% 
                        </p>
                        <p class="card-text">
                          <strong>Min Amount:</strong> <%= coupon.minAmount %> Rs
                        </p>
                        <p class="card-text">
                          <strong>Max Discount Amount:</strong> <%= coupon.maxAmount %> Rs
                        </p>
                        <p class="card-text">
                          <strong>Code:</strong> <span class="badge bg-secondary"><%= coupon.code %></span>
                        </p>
                      </div>
                      <button type="button" class="btn btn-primary btn-sm mt-2" onclick="selectCoupon('<%= coupon.code %>','<%= cart? cart.user._id:null %>')"  >
                        <i class="bi bi-check-circle me-1"></i> Apply
                      </button>
                    </div>
                  </div>
                </div>
                <% } %>
            <% }); %>
          </div>
          <% } %>
      </div>
    </div>
  </div>
</div>


<script>
  let couponSelected
  let couponApplied = false
  const openCouponModal = () => {
       const couponModal = new bootstrap.Modal(document.getElementById('couponModal'));
       couponModal.show();
     };
   
     
     const selectCoupon = async(couponCode,userId) => {
      couponSelected = couponCode
      await applyCoupon(couponCode,userId);
      const couponModal = bootstrap.Modal.getInstance(document.getElementById('couponModal'));
      couponModal.hide();
       
     };

     const removeCoupon = async (userId) => {
      try {
        const response = await fetch('/cart/removeCoupon', {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ userId })
        });
    
        const data = await response.json();
    
        if (data.success) {
          updateOrderSummary(data.summary);
          couponSelected = null
          couponApplied = false
          document.getElementById('coupontag').textContent = 'Apply coupon';
    
          
          const removeCouponButton = document.getElementById('removeCouponButton');
          if (removeCouponButton) {
            removeCouponButton.remove();
          }

          const applyCouponButton = document.createElement('button');
          applyCouponButton.type = 'button';
          applyCouponButton.id = 'applyCouponButton';
          applyCouponButton.className = 'ms-2 btn btn-primary btn-sm';
          applyCouponButton.textContent = 'Apply Coupon';
          applyCouponButton.onclick = openCouponModal;
    
          const buttonContainer = document.getElementById('applyandremovebtncontainer');
          if (buttonContainer) {
            buttonContainer.appendChild(applyCouponButton);
          }
    
          Swal.fire({
            icon: 'success',
            text: 'Coupon removed successfully.',
            toast: true,
            position: 'top-right',
            showConfirmButton: false,
            timerProgressBar: true,
            timer: 3000
          });
        } else {
          Swal.fire({
            icon: 'error',
            text: data.message,
            toast: true,
            position: 'top-right',
            showConfirmButton: false,
            timerProgressBar: true,
            timer: 3000
          });
        }
      } catch (error) {
        console.error('Error removing coupon:', error);
    
        Swal.fire({
          icon: 'error',
          text: 'An error occurred while removing the coupon.',
          toast: true,
          position: 'top-right',
          showConfirmButton: false,
          timerProgressBar: true,
          timer: 3000
        });
      }
    };
    
    

     const applyCoupon= async (coupon,userId) =>{
    
        try {
            const response = await fetch(`/cart/applyCoupon`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ coupon,userId })
            });
    
            const data = await response.json();
    
            if (data.success) {
              couponApplied = true
              updateOrderSummary(data.summary);
              document.getElementById('coupontag').textContent = `Coupon applied`
              const applyCouponButton = document.getElementById('applyCouponButton');
if (applyCouponButton) {
  applyCouponButton.remove();
}

const removeCouponButton = document.createElement('button');
removeCouponButton.type = 'button';
removeCouponButton.id = 'removeCouponButton';
removeCouponButton.className = 'btn btn-danger btn-sm ms-2';
removeCouponButton.textContent = 'Remove Coupon';


removeCouponButton.onclick = function() {
  removeCoupon('<%= cart ? cart.user._id:null %>'); 
};


const buttonContainer = document.getElementById('applyandremovebtncontainer'); 
if (buttonContainer) {
  buttonContainer.appendChild(removeCouponButton);
}
              
                Swal.fire({
                  icon: 'success',
                  text: 'Coupon applied successfully.',
                  toast: true,
                  position: 'top-right',
                  showConfirmButton: false,
                  timerProgressBar: true,
                  timer: 3000
                });
                
            } else {
                Swal.fire({
                    icon: 'error',
                    text: data.message,
                    toast: true,
                    position: 'top-right',
                    showConfirmButton: false,
                    timerProgressBar: true,
                    timer: 3000
                });
            }
        } catch (error) {
    
            console.error('Error applying coupon:', error);
    
            Swal.fire({
              icon: 'error',
              text: 'An error occurred while applying the coupon.',
              toast: true,
              position: 'top-right',
              showConfirmButton: false,
              timerProgressBar: true,
              timer: 3000
            });
    
        }
    }    
  
  async function removeItem(itemId) {
    const result = await Swal.fire({
      title: 'Are you sure?',
      text: 'You won\'t be able to revert this!',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, remove it!',
      cancelButtonText: 'No, cancel!'
    });

    if (result.isConfirmed) {
      try {
        const response = await fetch(`/removeItem?itemId=${itemId}`, { method: 'DELETE' });
        if (!response.ok) throw new Error('Server responded with an error');

        const data = await response.json();
        if (data.success) {
          if (!data.isEmpty) {
          couponApplied =false
            const itemElement = document.querySelector(`[data-product-item-id="${itemId}"]`).closest('.card.mb-3');
            if (itemElement) {
              itemElement.remove();
              updateOrderSummary(data.summary);
              document.getElementById('selectionItemsLength').textContent = `Price (${data.cart.items.length} items)`
              return;
            }
          }

          if (data.isEmpty) {
            const mainContainer = document.getElementById('mainContainer');
            if (mainContainer) {
              mainContainer.innerHTML = '';

              const emptyCartMessage = document.createElement('div');
              emptyCartMessage.className = 'col-12 text-center';
              emptyCartMessage.innerHTML = `
                <h2>Your cart is empty!</h2>
                <p>Add items to it now.</p>
                <a href="/shop" class="btn btn-primary">Shop now</a>
              `;
              
              mainContainer.appendChild(emptyCartMessage); 
            }
          }
        } else {
          Swal.fire('Error!', `There was a problem removing the item: ${data.message}`, 'error');
        }
      } catch (error) {
        console.error('Failed to remove item:', error);
        Swal.fire('Error!', `An unexpected error occurred: ${error.message}`, 'error');
      }
    }
  }

  // Function to increase quantity of an item
  async function addQuantity(itemId, itemQuantity) {
    try {
      const quantityDisplay = document.querySelector(`[data-product-item-id="${itemId}"]`).closest('.card.mb-3').querySelector('.quantity-display');
      const currentQuantity = parseInt(quantityDisplay.textContent, 10);
      
      if (currentQuantity >= parseInt(itemQuantity) || currentQuantity >= 5) {
        Swal.fire('Limit Reached', 'You can’t add any more of this product.', 'info');
        return;
      }

      const response = await fetch(`/increase-quantity?itemId=${itemId}`, 
      {
         method: 'PATCH',
         body:JSON.stringify({ coupon:couponSelected }),
         headers: { 'Content-Type': 'application/json' }
      });
      if (!response.ok) throw new Error('Server responded with an error');

      const data = await response.json();
      if (data.success) {
        
        quantityDisplay.textContent = data.updatedQuantity;
        document.querySelector(`[data-product-item-id="${itemId}"]`).closest('.card.mb-3').querySelector('.decrease-quantity').disabled = false;
        updateOrderSummary(data.summary);
      } else {
        Swal.fire('Error!', 'There was a problem updating the quantity.', 'error');
      }
    } catch (error) {
      console.error('Failed to update quantity:', error);
      Swal.fire('Error!', `An unexpected error occurred: ${error.message}`, 'error');
    }
  }

  // Function to decrease quantity of an item
  async function decreaseQuantity(itemId) {
    try {
      const quantityDisplay = document.querySelector(`[data-product-item-id="${itemId}"]`).closest('.card.mb-3').querySelector('.quantity-display');
      const currentQuantity = parseInt(quantityDisplay.textContent, 10);
      
      if (currentQuantity <= 1) {
        Swal.fire('Minimum Quantity', 'You cannot reduce the quantity below 1.', 'info');
        return;
      }

      const response = await fetch(`/decrease-quantity?itemId=${itemId}`, 
      {
         method: 'PATCH',
         body:JSON.stringify({ coupon:couponSelected }),
         headers: { 'Content-Type': 'application/json' }
      });
      if (!response.ok) throw new Error('Server responded with an error');

      const data = await response.json();
      if (data.success) {
        
        quantityDisplay.textContent = data.updatedQuantity;
        if (data.updatedQuantity == 1) {
          document.querySelector(`[data-product-item-id="${itemId}"]`).closest('.card.mb-3').querySelector('.decrease-quantity').disabled = true;
        }
        updateOrderSummary(data.summary);
      } else {
        Swal.fire('Error!', 'There was a problem updating the quantity.', 'error');
      }
    } catch (error) {
      console.error('Failed to update quantity:', error);
      Swal.fire('Error!', `An unexpected error occurred: ${error.message}`, 'error');
    }
  }

  // Function to update the order summary from the server response
  function updateOrderSummary(summary) {
    const subTotalPrice = document.getElementById('subTotalPrice');
    const totalPrice = document.getElementById('totalPrice');
    const deliveryCharge = document.getElementById('deliveryCharge');
    const checkoutButton = document.getElementById('checkoutButton');
    const couponDiscount = document.getElementById('couponDiscount');

    if (subTotalPrice) {
      subTotalPrice.textContent = `₹${summary.subtotal}`;
    }

    if (totalPrice) {
      totalPrice.textContent = `₹${summary.total}`;
    }

    if (deliveryCharge) {
      deliveryCharge.textContent = summary.deliveryCharges > 0 ? `₹${summary.deliveryCharges}` : 'Free';
    }

    if (couponDiscount) {
      couponApplied = true
      couponDiscount.textContent = `₹${summary.couponDiscount}`;
    }

    if (checkoutButton) {
      checkoutButton.disabled = parseFloat(summary.total) === 0;
    }
  }

  
</script>

<%- include('../layout/user_footer.ejs') %>
